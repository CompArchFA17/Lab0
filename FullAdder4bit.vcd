$date
	Tue Sep 26 18:38:53 2017
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module forTesting $end
$upscope $end
$scope module testFourBitAdder $end
$var wire 1 ! Cout $end
$var wire 1 " overflow $end
$var wire 4 # sum [3:0] $end
$var reg 4 $ a [3:0] $end
$var reg 4 % b [3:0] $end
$scope module test $end
$var wire 4 & a [3:0] $end
$var wire 4 ' b [3:0] $end
$var wire 1 ! carryout $end
$var wire 1 ( cout0 $end
$var wire 1 ) cout1 $end
$var wire 1 * cout2 $end
$var wire 1 " overflow $end
$var wire 4 + sum [3:0] $end
$scope module gate0 $end
$var wire 1 , AandB $end
$var wire 1 - AxorB $end
$var wire 1 . CAxorB $end
$var wire 1 ( Cout $end
$var wire 1 / a $end
$var wire 1 0 b $end
$var wire 1 1 carryin $end
$var wire 1 2 structsum $end
$upscope $end
$scope module gate1 $end
$var wire 1 3 AandB $end
$var wire 1 4 AxorB $end
$var wire 1 5 CAxorB $end
$var wire 1 ) Cout $end
$var wire 1 6 a $end
$var wire 1 7 b $end
$var wire 1 ( carryin $end
$var wire 1 8 structsum $end
$upscope $end
$scope module gate2 $end
$var wire 1 9 AandB $end
$var wire 1 : AxorB $end
$var wire 1 ; CAxorB $end
$var wire 1 * Cout $end
$var wire 1 < a $end
$var wire 1 = b $end
$var wire 1 ) carryin $end
$var wire 1 > structsum $end
$upscope $end
$scope module gate3 $end
$var wire 1 ? AandB $end
$var wire 1 @ AxorB $end
$var wire 1 A CAxorB $end
$var wire 1 ! Cout $end
$var wire 1 B a $end
$var wire 1 C b $end
$var wire 1 * carryin $end
$var wire 1 D structsum $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
xD
0C
0B
xA
z@
z?
x>
1=
0<
x;
z:
z9
x8
07
16
x5
z4
z3
x2
01
00
0/
z.
z-
z,
bx +
x*
x)
x(
b100 '
b10 &
b100 %
b10 $
bx #
x"
x!
$end
#50000
0?
0@
09
1:
03
14
0.
0,
0-
#100000
0A
0(
02
bx0 #
bx0 +
#150000
0!
18
bx10 #
bx10 +
05
#200000
0)
#250000
1>
bx110 #
bx110 +
0;
#300000
0*
#350000
0D
b110 #
b110 +
0"
#1000000
17
1/
06
b110 %
b110 '
b1 $
b1 &
#1050000
1-
#1100000
12
b111 #
b111 +
#2000000
10
07
1C
1<
b1101 %
b1101 '
b101 $
b101 &
#2050000
0-
1,
04
1@
0:
19
#2100000
02
1(
08
1D
0>
b1000 #
b1000 +
1*
#2150000
18
0D
b10 #
b10 +
1A
1"
#2200000
1!
#2250000
0"
#3000000
17
0/
16
0<
b1111 %
b1111 '
b10 $
b10 &
#3050000
1-
0,
13
1:
09
#3100000
12
0(
1)
1>
b111 #
b111 +
0*
#3150000
08
0>
1;
1D
b1001 #
b1001 +
0A
1"
#3200000
1*
0!
#3250000
0D
b1 #
b1 +
1A
#3300000
1!
#3350000
0"
#4000000
0=
0C
06
1B
b11 %
b11 '
b1000 $
b1000 &
#4050000
0:
14
03
#4100000
1>
0;
18
b111 #
b111 +
0)
#4150000
0*
0>
b11 #
b11 +
#4200000
1D
b1011 #
b1011 +
0A
1"
#4250000
0!
#4300000
0"
#5000000
00
1<
b10 %
b10 '
b1100 $
b1100 &
#5050000
0-
1:
#5100000
02
1>
b1110 #
b1110 +
#6000000
10
1/
b11 %
b11 '
b1101 $
b1101 &
#6050000
1,
#6100000
1(
#6150000
08
b1100 #
b1100 +
15
#6200000
1)
#6250000
0>
b1000 #
b1000 +
1;
#6300000
1*
#6350000
0D
b0 #
b0 +
1A
1"
#6400000
1!
#6450000
0"
#7000000
1=
0<
b111 %
b111 '
b1001 $
b1001 &
#8000000
00
07
1C
1<
b1100 %
b1100 '
b1101 $
b1101 &
#8050000
1-
0,
04
0@
1?
0:
19
#8100000
12
0(
18
05
1D
0A
1>
b1111 #
b1111 +
0;
#8150000
08
b1101 #
b1101 +
0)
#8200000
0>
b1001 #
b1001 +
#9000000
17
0=
0/
16
b1010 %
b1010 '
b1110 $
b1110 &
#9050000
1:
09
0-
13
#9100000
1>
0*
02
b1100 #
b1100 +
1)
#9150000
0D
1"
0>
b0 #
b0 +
1;
#9200000
1*
#9250000
1D
b1000 #
b1000 +
0"
#10000000
1=
0C
1/
06
0B
b110 %
b110 '
b101 $
b101 &
#10050000
0:
19
1-
14
03
0?
#10100000
1>
0;
12
18
b1111 #
b1111 +
0)
0!
#10150000
0>
b1011 #
b1011 +
1"
#11000000
10
0/
16
0<
b111 %
b111 '
b10 $
b10 &
#11050000
04
13
1:
09
#11100000
08
1)
1>
b1101 #
b1101 +
0*
#11150000
0>
1;
0D
b1 #
b1 +
0"
#11200000
1*
#11250000
1D
b1001 #
b1001 +
1"
#12000000
1C
06
1B
b1111 %
b1111 '
b1000 $
b1000 &
#12050000
14
03
1?
#12100000
18
b1011 #
b1011 +
0)
1!
#12150000
1>
b1111 #
b1111 +
0;
0"
#12200000
0*
#12250000
0D
b111 #
b111 +
1"
#14000000
07
b1101 %
b1101 '
#14050000
04
#14100000
08
b101 #
b101 +
#15000000
00
1/
16
b1100 %
b1100 '
b1011 $
b1011 &
#15050000
14
#15100000
18
b111 #
b111 +
#16000000
